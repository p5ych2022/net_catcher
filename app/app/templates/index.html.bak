<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Network Traffic Data</title>
    <link href="css/materialize.min.css" rel="stylesheet">
    <link href="https://fonts.googleapis.com/icon?family=Material+Icons" rel="stylesheet">
    <script src="js/materialize.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
    <style>
        body {
            font-family: Arial, sans-serif;
            padding: 20px;
        }
        h1 {
            text-align: center;
        }
        .container {
            display: flex;
            flex-wrap: wrap;
            justify-content: space-around;
            margin: 20px;
        }
        .table-container, .chart-container {
            width: 100%;
            max-width: 45%;
        }
        table {
            width: 100%;
            border-collapse: collapse;
            margin-bottom: 20px;
        }
        th, td {
            border: 1px solid #ddd;
            padding: 8px;
            text-align: left;
        }
        th {
            background-color: #f2f2f2;
        }
        .pagination {
            display: flex;
            justify-content: center;
        }
    </style>
</head>
<body>
    <h1>Network Traffic Data</h1>
    <div class="input-field">
        <input type="text" id="search" placeholder="Search">
        <label for="search">Search</label>
    </div>
    <div class="container">
        <div class="table-container">
            <h2>Recent Payloads</h2>
            <table id="payloadTable" class="highlight">
                <thead>
                    <tr>
                        <th>Timestamp</th>
                        <th>Source IP</th>
                        <th>Destination IP</th>
                        <th>Protocol</th>
                        <th>Payload</th>
                    </tr>
                </thead>
                <tbody>
                    <!-- Data will be populated here -->
                </tbody>
            </table>
            <ul class="pagination">
                <li class="waves-effect"><a href="#!" id="prevPage"><i class="material-icons">chevron_left</i></a></li>
                <li class="waves-effect"><a href="#!" id="nextPage"><i class="material-icons">chevron_right</i></a></li>
            </ul>
        </div>
        <div class="chart-container">
            <h2>Protocol Statistics</h2>
            <canvas id="trafficChart"></canvas>
        </div>
    </div>
    <script>
        document.addEventListener('DOMContentLoaded', function() {
            M.updateTextFields();
        });

        let currentPage = 0;
        const limit = 10;

        async function fetchData(page = 0, query = '') {
            const response = await fetch(`/api/data?limit=${limit}&offset=${page * limit}&query=${query}`);
            return await response.json();
        }

        async function fetchStats() {
            const response = await fetch('/api/stats');
            return await response.json();
        }

        function updateTable(data) {
            const tableBody = document.getElementById('payloadTable').getElementsByTagName('tbody')[0];
            tableBody.innerHTML = '';
            data.forEach(row => {
                const newRow = tableBody.insertRow();
                const timestampCell = newRow.insertCell(0);
                const srcIpCell = newRow.insertCell(1);
                const dstIpCell = newRow.insertCell(2);
                const protocolCell = newRow.insertCell(3);
                const payloadCell = newRow.insertCell(4);

                timestampCell.textContent = row.timestamp;
                srcIpCell.textContent = row.src_ip;
                dstIpCell.textContent = row.dst_ip;
                protocolCell.textContent = row.protocol;
                payloadCell.textContent = row.payload;
            });
        }

        function updateChart(data) {
            const ctx = document.getElementById('trafficChart').getContext('2d');
            const labels = data.map(item => item.protocol);
            const values = data.map(item => item.count);

            if (window.myChart) {
                window.myChart.data.labels = labels;
                window.myChart.data.datasets[0].data = values;
                window.myChart.update();
            } else {
                window.myChart = new Chart(ctx, {
                    type: 'bar',
                    data: {
                        labels: labels,
                        datasets: [{
                            label: '# of Packets',
                            data: values,
                            backgroundColor: 'rgba(75, 192, 192, 0.2)',
                            borderColor: 'rgba(75, 192, 192, 1)',
                            borderWidth: 1
                        }]
                    },
                    options: {
                        scales: {
                            y: {
                                beginAtZero: true
                            }
                        }
                    }
                });
            }
        }

        async function refreshData(page = 0, query = '') {
            const data = await fetchData(page, query);
            updateTable(data);
            const stats = await fetchStats();
            updateChart(stats);
        }

        document.getElementById('nextPage').addEventListener('click', () => {
            currentPage++;
            refreshData(currentPage, document.getElementById('search').value);
        });

        document.getElementById('prevPage').addEventListener('click', () => {
            if (currentPage > 0) {
                currentPage--;
                refreshData(currentPage, document.getElementById('search').value);
            }
        });

        document.getElementById('search').addEventListener('input', () => {
            refreshData(0, document.getElementById('search').value);
        });

        // Initial data load
        refreshData();
        setInterval(() => refreshData(currentPage, document.getElementById('search').value), 5000);
    </script>
</body>
</html>